openapi: 3.0.1
info:
  title: Orders
  version: v1
tags:
  - name: Orders
paths:
  /v1/orders:
    post:
      operationId: createOrder
      tags:
        - Orders
      summary: create a new order
      description: create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        201:
          description: order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        404:
          description: user is not found or books are not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        422:
          description: quantity provided is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      operationId: findOrders
      tags:
        - Orders
      summary: find orders
      description: find orders
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: orders found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindOrdersResponse'
        500:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    NewOrder:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
      required:
        - userId
        - items
    Item:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
          example: 1
        qty:
          type: integer
          example: 1
      required:
        - bookId
        - qty
    CreateOrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
      required:
        - id
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: an unexpected error occured
      required:
        - message
    FindOrdersResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
      required:
        - orders
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: testing@testing.com
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemResponse'
        totalAmount:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - email
        - items
        - totalAmount
        - createdAt
    ItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        bookId:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: John
        author:
          type: string
          example: Doe
        qty:
          type: integer
          example: 1
        price:
          type: number
          format: double
